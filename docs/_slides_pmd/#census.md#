---
---

## Specialized Packages

The third tier of access to online data is much preferred, if it
exists: a dedicated package in your programming language's repository
([PyPI](http://pypi.python.org) or [CRAN](http://cran.r-project.org)).

- Additional guidance on query parameters
- Returns data in native formats
- Handles all "encoding" problems

===

The [census](){:.pylib} package is a user contributed suite of tools
that streamline access to the API.

```{python title="{{ site.handouts }}"}
from census import Census

key = None
c = Census(key, year=2015)
c.acs5
```

===

Compared to using the API directly via the [requests](){:.pylib} package:

**Pros**
- More concise code, quicker development
- Package documentation (if present) is usually more user friendly than API documentaion.
- May allow seemless update if API changes

**Cons**
- No guarantee of updates
- Possibly limited in scope

===

Query the Census ACS5 survey for the variable `B19001_001E` and each
entity's `NAME`.

```{python title="{{ site.handouts }}"}
variables = ('NAME', 'B19013_001E')
geog = 
params = {
  'for': 'tract:*',
  'in': 'state:24',
}
```

===

The [census](){:.pylib} package converts the JSON string into a Python
dictionary. (No need to check headers.)

```{python title="{{ site.handouts }}"}
response = c.acs5.get(variables, params)
response
```

===

The Pandas `DataFrame()` constructor will accept the dictionary
as the sole argument, which includes column names and values.

```{python title="{{ site.handouts }}"}
df = pd.DataFrame(response)
df.dtypes
```

===

And here's a simple plot, which R users should be happy to see:

```{python, include = False}
import ggplot as gg

aes = gg.aes(x = 'county', y = variables[1])
gg.ggplot(df, aes) + gg.geom_boxplot()
```
